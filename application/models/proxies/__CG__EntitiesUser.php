<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \Entities\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function timestamp()
    {
        $this->__load();
        return parent::timestamp();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getResetCode()
    {
        $this->__load();
        return parent::getResetCode();
    }

    public function setResetCode($resetCode)
    {
        $this->__load();
        return parent::setResetCode($resetCode);
    }

    public function getResetTime()
    {
        $this->__load();
        return parent::getResetTime();
    }

    public function setResetTime($resetTime)
    {
        $this->__load();
        return parent::setResetTime($resetTime);
    }

    public function getRememberCode()
    {
        $this->__load();
        return parent::getRememberCode();
    }

    public function setRememberCode($rememberCode)
    {
        $this->__load();
        return parent::setRememberCode($rememberCode);
    }

    public function getLastLogin()
    {
        $this->__load();
        return parent::getLastLogin();
    }

    public function setLastLogin($lastLogin)
    {
        $this->__load();
        return parent::setLastLogin($lastLogin);
    }

    public function getLastLogout()
    {
        $this->__load();
        return parent::getLastLogout();
    }

    public function setLastLogout($lastLogout)
    {
        $this->__load();
        return parent::setLastLogout($lastLogout);
    }

    public function getRoles()
    {
        $this->__load();
        return parent::getRoles();
    }

    public function addRole(\Entities\Role $role)
    {
        $this->__load();
        return parent::addRole($role);
    }

    public function addRoles(\Doctrine\Common\Collections\ArrayCollection $roles)
    {
        $this->__load();
        return parent::addRoles($roles);
    }

    public function removeRoles(\Doctrine\Common\Collections\ArrayCollection $roles)
    {
        $this->__load();
        return parent::removeRoles($roles);
    }

    public function removeRole(\Entities\Role $role)
    {
        $this->__load();
        return parent::removeRole($role);
    }

    public function hasRole($roleName)
    {
        $this->__load();
        return parent::hasRole($roleName);
    }

    public function getFirstPhone()
    {
        $this->__load();
        return parent::getFirstPhone();
    }

    public function setFirstPhone($firstPhone)
    {
        $this->__load();
        return parent::setFirstPhone($firstPhone);
    }

    public function getSecondPhone()
    {
        $this->__load();
        return parent::getSecondPhone();
    }

    public function setSecondPhone($secondPhone)
    {
        $this->__load();
        return parent::setSecondPhone($secondPhone);
    }

    public function getAgence()
    {
        $this->__load();
        return parent::getAgence();
    }

    public function setAgence($agence)
    {
        $this->__load();
        return parent::setAgence($agence);
    }

    public function getFile()
    {
        $this->__load();
        return parent::getFile();
    }

    public function setFile($file)
    {
        $this->__load();
        return parent::setFile($file);
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function setCreated($created)
    {
        $this->__load();
        return parent::setCreated($created);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'username', 'email', 'password', 'resetCode', 'resetTime', 'rememberCode', 'lastLogin', 'lastLogout', 'firstPhone', 'secondPhone', 'created', 'roles', 'agence', 'file');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}